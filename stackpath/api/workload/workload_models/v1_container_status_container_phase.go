// Code generated by go-swagger; DO NOT EDIT.

package workload_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// V1ContainerStatusContainerPhase Which phase of runtime a container is currently in
//
// - CONTAINER_PHASE_UNSPECIFIED: The container has not reported a state back or StackPath is unable to determine the container's state
//   - STARTING: The container is starting up
//   - RUNNING: The container is running
//   - FAILED: The container has terminated due to a failure
//   - STOPPED: The container was terminated by the user
//
// swagger:model v1ContainerStatusContainerPhase
type V1ContainerStatusContainerPhase string

func NewV1ContainerStatusContainerPhase(value V1ContainerStatusContainerPhase) *V1ContainerStatusContainerPhase {
	v := value
	return &v
}

const (

	// V1ContainerStatusContainerPhaseCONTAINERPHASEUNSPECIFIED captures enum value "CONTAINER_PHASE_UNSPECIFIED"
	V1ContainerStatusContainerPhaseCONTAINERPHASEUNSPECIFIED V1ContainerStatusContainerPhase = "CONTAINER_PHASE_UNSPECIFIED"

	// V1ContainerStatusContainerPhaseSTARTING captures enum value "STARTING"
	V1ContainerStatusContainerPhaseSTARTING V1ContainerStatusContainerPhase = "STARTING"

	// V1ContainerStatusContainerPhaseRUNNING captures enum value "RUNNING"
	V1ContainerStatusContainerPhaseRUNNING V1ContainerStatusContainerPhase = "RUNNING"

	// V1ContainerStatusContainerPhaseFAILED captures enum value "FAILED"
	V1ContainerStatusContainerPhaseFAILED V1ContainerStatusContainerPhase = "FAILED"

	// V1ContainerStatusContainerPhaseSTOPPED captures enum value "STOPPED"
	V1ContainerStatusContainerPhaseSTOPPED V1ContainerStatusContainerPhase = "STOPPED"
)

// for schema
var v1ContainerStatusContainerPhaseEnum []interface{}

func init() {
	var res []V1ContainerStatusContainerPhase
	if err := json.Unmarshal([]byte(`["CONTAINER_PHASE_UNSPECIFIED","STARTING","RUNNING","FAILED","STOPPED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		v1ContainerStatusContainerPhaseEnum = append(v1ContainerStatusContainerPhaseEnum, v)
	}
}

func (m V1ContainerStatusContainerPhase) validateV1ContainerStatusContainerPhaseEnum(path, location string, value V1ContainerStatusContainerPhase) error {
	if err := validate.EnumCase(path, location, value, v1ContainerStatusContainerPhaseEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this v1 container status container phase
func (m V1ContainerStatusContainerPhase) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateV1ContainerStatusContainerPhaseEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this v1 container status container phase based on context it is used
func (m V1ContainerStatusContainerPhase) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
