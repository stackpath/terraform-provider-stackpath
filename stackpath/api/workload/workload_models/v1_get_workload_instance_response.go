// Code generated by go-swagger; DO NOT EDIT.

package workload_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V1GetWorkloadInstanceResponse A response from a request to retrieve a workload's instances
//
// swagger:model v1GetWorkloadInstanceResponse
type V1GetWorkloadInstanceResponse struct {

	// instance
	Instance *Workloadv1Instance `json:"instance,omitempty"`
}

// Validate validates this v1 get workload instance response
func (m *V1GetWorkloadInstanceResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateInstance(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1GetWorkloadInstanceResponse) validateInstance(formats strfmt.Registry) error {
	if swag.IsZero(m.Instance) { // not required
		return nil
	}

	if m.Instance != nil {
		if err := m.Instance.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("instance")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this v1 get workload instance response based on the context it is used
func (m *V1GetWorkloadInstanceResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateInstance(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1GetWorkloadInstanceResponse) contextValidateInstance(ctx context.Context, formats strfmt.Registry) error {

	if m.Instance != nil {

		if swag.IsZero(m.Instance) { // not required
			return nil
		}

		if err := m.Instance.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("instance")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1GetWorkloadInstanceResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1GetWorkloadInstanceResponse) UnmarshalBinary(b []byte) error {
	var res V1GetWorkloadInstanceResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
