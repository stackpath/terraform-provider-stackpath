// Code generated by go-swagger; DO NOT EDIT.

package workload_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Workloadv1Location Geographic location information
//
// swagger:model workloadv1Location
type Workloadv1Location struct {

	// A location's city
	City string `json:"city,omitempty"`

	// A location's city, expressed as an IATA airport code
	CityCode string `json:"cityCode,omitempty"`

	// A location's continent
	Continent string `json:"continent,omitempty"`

	// A location's continent code
	ContinentCode string `json:"continentCode,omitempty"`

	// A location's country
	Country string `json:"country,omitempty"`

	// A location's ISO-3166-1 alpha-2 country code
	CountryCode string `json:"countryCode,omitempty"`

	// A location's geographic latitude
	Latitude float64 `json:"latitude,omitempty"`

	// A location's geographic longitude
	Longitude float64 `json:"longitude,omitempty"`

	// A human readable location name
	Name string `json:"name,omitempty"`

	// A location's state or province
	Region string `json:"region,omitempty"`

	// A location's ISO-3166-2 region code
	RegionCode string `json:"regionCode,omitempty"`

	// A location's status, either active or decommissioned
	Status string `json:"status,omitempty"`

	// A location's subdivision
	Subdivision string `json:"subdivision,omitempty"`

	// A location's subdivision code
	SubdivisionCode string `json:"subdivisionCode,omitempty"`
}

// Validate validates this workloadv1 location
func (m *Workloadv1Location) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this workloadv1 location based on context it is used
func (m *Workloadv1Location) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Workloadv1Location) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Workloadv1Location) UnmarshalBinary(b []byte) error {
	var res Workloadv1Location
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
