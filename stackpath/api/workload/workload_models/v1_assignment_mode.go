// Code generated by go-swagger; DO NOT EDIT.

package workload_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// V1AssignmentMode v1 assignment mode
//
// swagger:model v1AssignmentMode
type V1AssignmentMode string

func NewV1AssignmentMode(value V1AssignmentMode) *V1AssignmentMode {
	v := value
	return &v
}

const (

	// V1AssignmentModeUNSPECIFIED captures enum value "UNSPECIFIED"
	V1AssignmentModeUNSPECIFIED V1AssignmentMode = "UNSPECIFIED"

	// V1AssignmentModePRIMARY captures enum value "PRIMARY"
	V1AssignmentModePRIMARY V1AssignmentMode = "PRIMARY"

	// V1AssignmentModeONETOONENAT captures enum value "ONE_TO_ONE_NAT"
	V1AssignmentModeONETOONENAT V1AssignmentMode = "ONE_TO_ONE_NAT"

	// V1AssignmentModeADDITIONAL captures enum value "ADDITIONAL"
	V1AssignmentModeADDITIONAL V1AssignmentMode = "ADDITIONAL"

	// V1AssignmentModeFORWARD captures enum value "FORWARD"
	V1AssignmentModeFORWARD V1AssignmentMode = "FORWARD"
)

// for schema
var v1AssignmentModeEnum []interface{}

func init() {
	var res []V1AssignmentMode
	if err := json.Unmarshal([]byte(`["UNSPECIFIED","PRIMARY","ONE_TO_ONE_NAT","ADDITIONAL","FORWARD"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		v1AssignmentModeEnum = append(v1AssignmentModeEnum, v)
	}
}

func (m V1AssignmentMode) validateV1AssignmentModeEnum(path, location string, value V1AssignmentMode) error {
	if err := validate.EnumCase(path, location, value, v1AssignmentModeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this v1 assignment mode
func (m V1AssignmentMode) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateV1AssignmentModeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this v1 assignment mode based on context it is used
func (m V1AssignmentMode) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
