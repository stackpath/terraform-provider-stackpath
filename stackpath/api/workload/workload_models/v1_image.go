// Code generated by go-swagger; DO NOT EDIT.

package workload_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1Image A virtual machine image
//
// swagger:model v1Image
type V1Image struct {

	// capabilities
	Capabilities []string `json:"capabilities"`

	// Details about an image's status
	// Read Only: true
	Conditions []*V1ImageCondition `json:"conditions"`

	// deprecation
	Deprecation *V1ImageDeprecation `json:"deprecation,omitempty"`

	// An image's description
	//
	// This is optional and may not be more than 1,000 characters
	Description string `json:"description,omitempty"`

	// An image's family
	//
	// Families are logical groupings of images
	Family string `json:"family,omitempty"`

	// An image's unique identifier
	// Read Only: true
	ID string `json:"id,omitempty"`

	// An image's archive size in bytes
	//
	// This is only available on ready images
	// Read Only: true
	ImageSize string `json:"imageSize,omitempty"`

	// licenses
	Licenses []string `json:"licenses"`

	// metadata
	Metadata *V1ImageMetadata `json:"metadata,omitempty"`

	// The ID of the stack that an image belongs to
	// Read Only: true
	StackID string `json:"stackId,omitempty"`

	// An image's capture status
	// Read Only: true
	Status *V1ImageStatus `json:"status,omitempty"`

	// The image's tag
	//
	// Image tags are akin to versions
	Tag string `json:"tag,omitempty"`

	// An image's volume size in bytes
	//
	// This is only available on ready images
	// Read Only: true
	VolumeSize string `json:"volumeSize,omitempty"`
}

// Validate validates this v1 image
func (m *V1Image) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConditions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeprecation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetadata(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1Image) validateConditions(formats strfmt.Registry) error {
	if swag.IsZero(m.Conditions) { // not required
		return nil
	}

	for i := 0; i < len(m.Conditions); i++ {
		if swag.IsZero(m.Conditions[i]) { // not required
			continue
		}

		if m.Conditions[i] != nil {
			if err := m.Conditions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("conditions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1Image) validateDeprecation(formats strfmt.Registry) error {
	if swag.IsZero(m.Deprecation) { // not required
		return nil
	}

	if m.Deprecation != nil {
		if err := m.Deprecation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deprecation")
			}
			return err
		}
	}

	return nil
}

func (m *V1Image) validateMetadata(formats strfmt.Registry) error {
	if swag.IsZero(m.Metadata) { // not required
		return nil
	}

	if m.Metadata != nil {
		if err := m.Metadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metadata")
			}
			return err
		}
	}

	return nil
}

func (m *V1Image) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if m.Status != nil {
		if err := m.Status.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this v1 image based on the context it is used
func (m *V1Image) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateConditions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDeprecation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateImageSize(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMetadata(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStackID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVolumeSize(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1Image) contextValidateConditions(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "conditions", "body", []*V1ImageCondition(m.Conditions)); err != nil {
		return err
	}

	for i := 0; i < len(m.Conditions); i++ {

		if m.Conditions[i] != nil {
			if err := m.Conditions[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("conditions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1Image) contextValidateDeprecation(ctx context.Context, formats strfmt.Registry) error {

	if m.Deprecation != nil {
		if err := m.Deprecation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deprecation")
			}
			return err
		}
	}

	return nil
}

func (m *V1Image) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "id", "body", string(m.ID)); err != nil {
		return err
	}

	return nil
}

func (m *V1Image) contextValidateImageSize(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "imageSize", "body", string(m.ImageSize)); err != nil {
		return err
	}

	return nil
}

func (m *V1Image) contextValidateMetadata(ctx context.Context, formats strfmt.Registry) error {

	if m.Metadata != nil {
		if err := m.Metadata.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metadata")
			}
			return err
		}
	}

	return nil
}

func (m *V1Image) contextValidateStackID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "stackId", "body", string(m.StackID)); err != nil {
		return err
	}

	return nil
}

func (m *V1Image) contextValidateStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.Status != nil {
		if err := m.Status.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status")
			}
			return err
		}
	}

	return nil
}

func (m *V1Image) contextValidateVolumeSize(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "volumeSize", "body", string(m.VolumeSize)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1Image) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1Image) UnmarshalBinary(b []byte) error {
	var res V1Image
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
