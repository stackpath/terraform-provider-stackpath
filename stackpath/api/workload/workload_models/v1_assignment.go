// Code generated by go-swagger; DO NOT EDIT.

package workload_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V1Assignment v1 assignment
//
// swagger:model v1Assignment
type V1Assignment struct {

	// allocation claim template
	AllocationClaimTemplate *V1AllocationClaim `json:"allocationClaimTemplate,omitempty"`

	// mode
	Mode *V1AssignmentMode `json:"mode,omitempty"`

	// slug
	Slug string `json:"slug,omitempty"`
}

// Validate validates this v1 assignment
func (m *V1Assignment) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAllocationClaimTemplate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1Assignment) validateAllocationClaimTemplate(formats strfmt.Registry) error {
	if swag.IsZero(m.AllocationClaimTemplate) { // not required
		return nil
	}

	if m.AllocationClaimTemplate != nil {
		if err := m.AllocationClaimTemplate.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("allocationClaimTemplate")
			}
			return err
		}
	}

	return nil
}

func (m *V1Assignment) validateMode(formats strfmt.Registry) error {
	if swag.IsZero(m.Mode) { // not required
		return nil
	}

	if m.Mode != nil {
		if err := m.Mode.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mode")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this v1 assignment based on the context it is used
func (m *V1Assignment) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAllocationClaimTemplate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMode(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1Assignment) contextValidateAllocationClaimTemplate(ctx context.Context, formats strfmt.Registry) error {

	if m.AllocationClaimTemplate != nil {
		if err := m.AllocationClaimTemplate.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("allocationClaimTemplate")
			}
			return err
		}
	}

	return nil
}

func (m *V1Assignment) contextValidateMode(ctx context.Context, formats strfmt.Registry) error {

	if m.Mode != nil {
		if err := m.Mode.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mode")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1Assignment) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1Assignment) UnmarshalBinary(b []byte) error {
	var res V1Assignment
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
