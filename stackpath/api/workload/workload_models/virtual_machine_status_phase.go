// Code generated by go-swagger; DO NOT EDIT.

package workload_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// VirtualMachineStatusPhase virtual machine status phase
//
// swagger:model VirtualMachineStatusPhase
type VirtualMachineStatusPhase string

func NewVirtualMachineStatusPhase(value VirtualMachineStatusPhase) *VirtualMachineStatusPhase {
	v := value
	return &v
}

const (

	// VirtualMachineStatusPhaseUNKNOWN captures enum value "UNKNOWN"
	VirtualMachineStatusPhaseUNKNOWN VirtualMachineStatusPhase = "UNKNOWN"

	// VirtualMachineStatusPhasePENDING captures enum value "PENDING"
	VirtualMachineStatusPhasePENDING VirtualMachineStatusPhase = "PENDING"

	// VirtualMachineStatusPhaseSCHEDULING captures enum value "SCHEDULING"
	VirtualMachineStatusPhaseSCHEDULING VirtualMachineStatusPhase = "SCHEDULING"

	// VirtualMachineStatusPhaseSTARTING captures enum value "STARTING"
	VirtualMachineStatusPhaseSTARTING VirtualMachineStatusPhase = "STARTING"

	// VirtualMachineStatusPhaseRUNNING captures enum value "RUNNING"
	VirtualMachineStatusPhaseRUNNING VirtualMachineStatusPhase = "RUNNING"

	// VirtualMachineStatusPhaseSTOPPED captures enum value "STOPPED"
	VirtualMachineStatusPhaseSTOPPED VirtualMachineStatusPhase = "STOPPED"

	// VirtualMachineStatusPhaseFAILED captures enum value "FAILED"
	VirtualMachineStatusPhaseFAILED VirtualMachineStatusPhase = "FAILED"
)

// for schema
var virtualMachineStatusPhaseEnum []interface{}

func init() {
	var res []VirtualMachineStatusPhase
	if err := json.Unmarshal([]byte(`["UNKNOWN","PENDING","SCHEDULING","STARTING","RUNNING","STOPPED","FAILED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		virtualMachineStatusPhaseEnum = append(virtualMachineStatusPhaseEnum, v)
	}
}

func (m VirtualMachineStatusPhase) validateVirtualMachineStatusPhaseEnum(path, location string, value VirtualMachineStatusPhase) error {
	if err := validate.EnumCase(path, location, value, virtualMachineStatusPhaseEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this virtual machine status phase
func (m VirtualMachineStatusPhase) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateVirtualMachineStatusPhaseEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this virtual machine status phase based on context it is used
func (m VirtualMachineStatusPhase) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
