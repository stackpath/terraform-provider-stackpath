// Code generated by go-swagger; DO NOT EDIT.

package storage_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"encoding/json"
	"io"
	"io/ioutil"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// APIStatusDetail api status detail
//
// swagger:discriminator apiStatusDetail @type
type APIStatusDetail interface {
	runtime.Validatable
	runtime.ContextValidatable

	// at type
	// Required: true
	AtType() string
	SetAtType(string)

	// AdditionalProperties in base type shoud be handled just like regular properties
	// At this moment, the base type property is pushed down to the subtype
}

type apiStatusDetail struct {
	atTypeField string
}

// AtType gets the at type of this polymorphic type
func (m *apiStatusDetail) AtType() string {
	return "apiStatusDetail"
}

// SetAtType sets the at type of this polymorphic type
func (m *apiStatusDetail) SetAtType(val string) {
}

// UnmarshalAPIStatusDetailSlice unmarshals polymorphic slices of APIStatusDetail
func UnmarshalAPIStatusDetailSlice(reader io.Reader, consumer runtime.Consumer) ([]APIStatusDetail, error) {
	var elements []json.RawMessage
	if err := consumer.Consume(reader, &elements); err != nil {
		return nil, err
	}

	var result []APIStatusDetail
	for _, element := range elements {
		obj, err := unmarshalAPIStatusDetail(element, consumer)
		if err != nil {
			return nil, err
		}
		result = append(result, obj)
	}
	return result, nil
}

// UnmarshalAPIStatusDetail unmarshals polymorphic APIStatusDetail
func UnmarshalAPIStatusDetail(reader io.Reader, consumer runtime.Consumer) (APIStatusDetail, error) {
	// we need to read this twice, so first into a buffer
	data, err := ioutil.ReadAll(reader)
	if err != nil {
		return nil, err
	}
	return unmarshalAPIStatusDetail(data, consumer)
}

func unmarshalAPIStatusDetail(data []byte, consumer runtime.Consumer) (APIStatusDetail, error) {
	buf := bytes.NewBuffer(data)
	buf2 := bytes.NewBuffer(data)

	// the first time this is read is to fetch the value of the @type property.
	var getType struct {
		AtType string `json:"@type"`
	}
	if err := consumer.Consume(buf, &getType); err != nil {
		return nil, err
	}

	if err := validate.RequiredString("@type", "body", getType.AtType); err != nil {
		return nil, err
	}

	// The value of @type is used to determine which type to create and unmarshal the data into
	switch getType.AtType {
	case "apiStatusDetail":
		var result apiStatusDetail
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil
	case "stackpath.rpc.BadRequest":
		var result StackpathRPCBadRequest
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil
	case "stackpath.rpc.Help":
		var result StackpathRPCHelp
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil
	case "stackpath.rpc.LocalizedMessage":
		var result StackpathRPCLocalizedMessage
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil
	case "stackpath.rpc.PreconditionFailure":
		var result StackpathRPCPreconditionFailure
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil
	case "stackpath.rpc.QuotaFailure":
		var result StackpathRPCQuotaFailure
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil
	case "stackpath.rpc.RequestInfo":
		var result StackpathRPCRequestInfo
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil
	case "stackpath.rpc.ResourceInfo":
		var result StackpathRPCResourceInfo
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil
	case "stackpath.rpc.RetryInfo":
		var result StackpathRPCRetryInfo
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil
	}
	return nil, errors.New(422, "invalid @type value: %q", getType.AtType)
}

// Validate validates this api status detail
func (m *apiStatusDetail) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this api status detail based on context it is used
func (m *apiStatusDetail) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
