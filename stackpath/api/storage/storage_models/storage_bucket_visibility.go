// Code generated by go-swagger; DO NOT EDIT.

package storage_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// StorageBucketVisibility - PRIVATE: The bucket is private and only accessibly with credentials
//   - PUBLIC: The bucket is public and accessible over the internet
//
// swagger:model storageBucketVisibility
type StorageBucketVisibility string

func NewStorageBucketVisibility(value StorageBucketVisibility) *StorageBucketVisibility {
	v := value
	return &v
}

const (

	// StorageBucketVisibilityPRIVATE captures enum value "PRIVATE"
	StorageBucketVisibilityPRIVATE StorageBucketVisibility = "PRIVATE"

	// StorageBucketVisibilityPUBLIC captures enum value "PUBLIC"
	StorageBucketVisibilityPUBLIC StorageBucketVisibility = "PUBLIC"
)

// for schema
var storageBucketVisibilityEnum []interface{}

func init() {
	var res []StorageBucketVisibility
	if err := json.Unmarshal([]byte(`["PRIVATE","PUBLIC"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		storageBucketVisibilityEnum = append(storageBucketVisibilityEnum, v)
	}
}

func (m StorageBucketVisibility) validateStorageBucketVisibilityEnum(path, location string, value StorageBucketVisibility) error {
	if err := validate.EnumCase(path, location, value, storageBucketVisibilityEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this storage bucket visibility
func (m StorageBucketVisibility) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateStorageBucketVisibilityEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this storage bucket visibility based on context it is used
func (m StorageBucketVisibility) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
