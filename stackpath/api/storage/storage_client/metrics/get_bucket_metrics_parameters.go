// Code generated by go-swagger; DO NOT EDIT.

package metrics

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetBucketMetricsParams creates a new GetBucketMetricsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetBucketMetricsParams() *GetBucketMetricsParams {
	return &GetBucketMetricsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetBucketMetricsParamsWithTimeout creates a new GetBucketMetricsParams object
// with the ability to set a timeout on a request.
func NewGetBucketMetricsParamsWithTimeout(timeout time.Duration) *GetBucketMetricsParams {
	return &GetBucketMetricsParams{
		timeout: timeout,
	}
}

// NewGetBucketMetricsParamsWithContext creates a new GetBucketMetricsParams object
// with the ability to set a context for a request.
func NewGetBucketMetricsParamsWithContext(ctx context.Context) *GetBucketMetricsParams {
	return &GetBucketMetricsParams{
		Context: ctx,
	}
}

// NewGetBucketMetricsParamsWithHTTPClient creates a new GetBucketMetricsParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetBucketMetricsParamsWithHTTPClient(client *http.Client) *GetBucketMetricsParams {
	return &GetBucketMetricsParams{
		HTTPClient: client,
	}
}

/*
GetBucketMetricsParams contains all the parameters to send to the API endpoint

	for the get bucket metrics operation.

	Typically these are written to a http.Request.
*/
type GetBucketMetricsParams struct {

	/* BucketID.

	   The ID for the bucket to retrieve metrics for
	*/
	BucketID string

	/* EndTime.

	   The end date for the range of metrics.

	   Format: date-time
	*/
	EndTime *strfmt.DateTime

	/* StackID.

	   The ID for the stack on which the bucket belongs to
	*/
	StackID string

	/* StartTime.

	   The start date for the range of metrics.

	   Format: date-time
	*/
	StartTime *strfmt.DateTime

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get bucket metrics params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetBucketMetricsParams) WithDefaults() *GetBucketMetricsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get bucket metrics params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetBucketMetricsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get bucket metrics params
func (o *GetBucketMetricsParams) WithTimeout(timeout time.Duration) *GetBucketMetricsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get bucket metrics params
func (o *GetBucketMetricsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get bucket metrics params
func (o *GetBucketMetricsParams) WithContext(ctx context.Context) *GetBucketMetricsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get bucket metrics params
func (o *GetBucketMetricsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get bucket metrics params
func (o *GetBucketMetricsParams) WithHTTPClient(client *http.Client) *GetBucketMetricsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get bucket metrics params
func (o *GetBucketMetricsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBucketID adds the bucketID to the get bucket metrics params
func (o *GetBucketMetricsParams) WithBucketID(bucketID string) *GetBucketMetricsParams {
	o.SetBucketID(bucketID)
	return o
}

// SetBucketID adds the bucketId to the get bucket metrics params
func (o *GetBucketMetricsParams) SetBucketID(bucketID string) {
	o.BucketID = bucketID
}

// WithEndTime adds the endTime to the get bucket metrics params
func (o *GetBucketMetricsParams) WithEndTime(endTime *strfmt.DateTime) *GetBucketMetricsParams {
	o.SetEndTime(endTime)
	return o
}

// SetEndTime adds the endTime to the get bucket metrics params
func (o *GetBucketMetricsParams) SetEndTime(endTime *strfmt.DateTime) {
	o.EndTime = endTime
}

// WithStackID adds the stackID to the get bucket metrics params
func (o *GetBucketMetricsParams) WithStackID(stackID string) *GetBucketMetricsParams {
	o.SetStackID(stackID)
	return o
}

// SetStackID adds the stackId to the get bucket metrics params
func (o *GetBucketMetricsParams) SetStackID(stackID string) {
	o.StackID = stackID
}

// WithStartTime adds the startTime to the get bucket metrics params
func (o *GetBucketMetricsParams) WithStartTime(startTime *strfmt.DateTime) *GetBucketMetricsParams {
	o.SetStartTime(startTime)
	return o
}

// SetStartTime adds the startTime to the get bucket metrics params
func (o *GetBucketMetricsParams) SetStartTime(startTime *strfmt.DateTime) {
	o.StartTime = startTime
}

// WriteToRequest writes these params to a swagger request
func (o *GetBucketMetricsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param bucket_id
	if err := r.SetPathParam("bucket_id", o.BucketID); err != nil {
		return err
	}

	if o.EndTime != nil {

		// query param end_time
		var qrEndTime strfmt.DateTime

		if o.EndTime != nil {
			qrEndTime = *o.EndTime
		}
		qEndTime := qrEndTime.String()
		if qEndTime != "" {

			if err := r.SetQueryParam("end_time", qEndTime); err != nil {
				return err
			}
		}
	}

	// path param stack_id
	if err := r.SetPathParam("stack_id", o.StackID); err != nil {
		return err
	}

	if o.StartTime != nil {

		// query param start_time
		var qrStartTime strfmt.DateTime

		if o.StartTime != nil {
			qrStartTime = *o.StartTime
		}
		qStartTime := qrStartTime.String()
		if qStartTime != "" {

			if err := r.SetQueryParam("start_time", qStartTime); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
