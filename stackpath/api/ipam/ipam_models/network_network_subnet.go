// Code generated by go-swagger; DO NOT EDIT.

package ipam_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NetworkNetworkSubnet network network subnet
//
// swagger:model networkNetworkSubnet
type NetworkNetworkSubnet struct {

	// A network subnet's unique identifier
	ID string `json:"id,omitempty"`

	// metadata
	Metadata *NetworkMetadata `json:"metadata,omitempty"`

	// A network subnet's name as it appears in the StackPath portal
	Name string `json:"name,omitempty"`

	// The ID of the network that a network subnet belongs to
	NetworkID string `json:"networkId,omitempty"`

	// The network prefix in CIDR notation that the network subnet will use.
	//
	// This must be a full valid network CIDR without host bits. Ex: 10.16.0.0/16
	Prefix string `json:"prefix,omitempty"`

	// A network subnet's programmatic name
	Slug string `json:"slug,omitempty"`

	// The ID of the stack that a network subnet belongs to
	StackID string `json:"stackId,omitempty"`
}

// Validate validates this network network subnet
func (m *NetworkNetworkSubnet) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMetadata(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NetworkNetworkSubnet) validateMetadata(formats strfmt.Registry) error {
	if swag.IsZero(m.Metadata) { // not required
		return nil
	}

	if m.Metadata != nil {
		if err := m.Metadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metadata")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this network network subnet based on the context it is used
func (m *NetworkNetworkSubnet) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMetadata(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NetworkNetworkSubnet) contextValidateMetadata(ctx context.Context, formats strfmt.Registry) error {

	if m.Metadata != nil {
		if err := m.Metadata.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metadata")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NetworkNetworkSubnet) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NetworkNetworkSubnet) UnmarshalBinary(b []byte) error {
	var res NetworkNetworkSubnet
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
