// Code generated by go-swagger; DO NOT EDIT.

package ipam_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V1Protocols An object of all supported protocols and any attributes for them
//
// swagger:model v1Protocols
type V1Protocols struct {

	// ah
	Ah *V1ProtocolAh `json:"ah,omitempty"`

	// esp
	Esp *V1ProtocolEsp `json:"esp,omitempty"`

	// gre
	Gre *V1ProtocolGre `json:"gre,omitempty"`

	// icmp
	Icmp *V1ProtocolIcmp `json:"icmp,omitempty"`

	// ip6extfh
	Ip6extfh *V1ProtocolIp6Extfh `json:"ip6extfh,omitempty"`

	// ipip
	Ipip *V1ProtocolIpip `json:"ipip,omitempty"`

	// sctp
	Sctp *V1ProtocolSctp `json:"sctp,omitempty"`

	// tcp
	TCP *V1ProtocolTCP `json:"tcp,omitempty"`

	// tcp Udp
	TCPUDP *V1ProtocolTCPUDP `json:"tcpUdp,omitempty"`

	// udp
	UDP *V1ProtocolUDP `json:"udp,omitempty"`
}

// Validate validates this v1 protocols
func (m *V1Protocols) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTCP(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTCPUDP(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUDP(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1Protocols) validateTCP(formats strfmt.Registry) error {
	if swag.IsZero(m.TCP) { // not required
		return nil
	}

	if m.TCP != nil {
		if err := m.TCP.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tcp")
			}
			return err
		}
	}

	return nil
}

func (m *V1Protocols) validateTCPUDP(formats strfmt.Registry) error {
	if swag.IsZero(m.TCPUDP) { // not required
		return nil
	}

	if m.TCPUDP != nil {
		if err := m.TCPUDP.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tcpUdp")
			}
			return err
		}
	}

	return nil
}

func (m *V1Protocols) validateUDP(formats strfmt.Registry) error {
	if swag.IsZero(m.UDP) { // not required
		return nil
	}

	if m.UDP != nil {
		if err := m.UDP.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("udp")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this v1 protocols based on the context it is used
func (m *V1Protocols) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateTCP(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTCPUDP(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUDP(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1Protocols) contextValidateTCP(ctx context.Context, formats strfmt.Registry) error {

	if m.TCP != nil {
		if err := m.TCP.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tcp")
			}
			return err
		}
	}

	return nil
}

func (m *V1Protocols) contextValidateTCPUDP(ctx context.Context, formats strfmt.Registry) error {

	if m.TCPUDP != nil {
		if err := m.TCPUDP.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tcpUdp")
			}
			return err
		}
	}

	return nil
}

func (m *V1Protocols) contextValidateUDP(ctx context.Context, formats strfmt.Registry) error {

	if m.UDP != nil {
		if err := m.UDP.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("udp")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1Protocols) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1Protocols) UnmarshalBinary(b []byte) error {
	var res V1Protocols
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
