// Code generated by go-swagger; DO NOT EDIT.

package ipam_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NetworkRoute network route
//
// swagger:model networkRoute
type NetworkRoute struct {

	// Networks of a route's destination blocks
	DestinationNetworks []*RouteNetworkSelector `json:"destinationNetworks"`

	// Network prefixes of a route's destination blocks
	DestinationPrefixes []string `json:"destinationPrefixes"`

	// Selectors used to select which interfaces should be used as route gateways
	GatewaySelectors []*RouteGatewaySelector `json:"gatewaySelectors"`

	// A routes's unique identifier
	ID string `json:"id,omitempty"`

	// metadata
	Metadata *NetworkMetadata `json:"metadata,omitempty"`

	// A routes's name as it appears in the StackPath portal
	Name string `json:"name,omitempty"`

	// The ID of the network that a route belongs to
	NetworkID string `json:"networkId,omitempty"`

	// A route's programmatic name
	Slug string `json:"slug,omitempty"`

	// The ID of the stack that a route belongs to
	StackID string `json:"stackId,omitempty"`

	// Statuses of the route in different regions
	Statuses []*NetworkRouteStatus `json:"statuses"`
}

// Validate validates this network route
func (m *NetworkRoute) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDestinationNetworks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGatewaySelectors(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetadata(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatuses(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NetworkRoute) validateDestinationNetworks(formats strfmt.Registry) error {
	if swag.IsZero(m.DestinationNetworks) { // not required
		return nil
	}

	for i := 0; i < len(m.DestinationNetworks); i++ {
		if swag.IsZero(m.DestinationNetworks[i]) { // not required
			continue
		}

		if m.DestinationNetworks[i] != nil {
			if err := m.DestinationNetworks[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("destinationNetworks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *NetworkRoute) validateGatewaySelectors(formats strfmt.Registry) error {
	if swag.IsZero(m.GatewaySelectors) { // not required
		return nil
	}

	for i := 0; i < len(m.GatewaySelectors); i++ {
		if swag.IsZero(m.GatewaySelectors[i]) { // not required
			continue
		}

		if m.GatewaySelectors[i] != nil {
			if err := m.GatewaySelectors[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("gatewaySelectors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *NetworkRoute) validateMetadata(formats strfmt.Registry) error {
	if swag.IsZero(m.Metadata) { // not required
		return nil
	}

	if m.Metadata != nil {
		if err := m.Metadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metadata")
			}
			return err
		}
	}

	return nil
}

func (m *NetworkRoute) validateStatuses(formats strfmt.Registry) error {
	if swag.IsZero(m.Statuses) { // not required
		return nil
	}

	for i := 0; i < len(m.Statuses); i++ {
		if swag.IsZero(m.Statuses[i]) { // not required
			continue
		}

		if m.Statuses[i] != nil {
			if err := m.Statuses[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("statuses" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this network route based on the context it is used
func (m *NetworkRoute) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDestinationNetworks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGatewaySelectors(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMetadata(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatuses(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NetworkRoute) contextValidateDestinationNetworks(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.DestinationNetworks); i++ {

		if m.DestinationNetworks[i] != nil {
			if err := m.DestinationNetworks[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("destinationNetworks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *NetworkRoute) contextValidateGatewaySelectors(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.GatewaySelectors); i++ {

		if m.GatewaySelectors[i] != nil {
			if err := m.GatewaySelectors[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("gatewaySelectors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *NetworkRoute) contextValidateMetadata(ctx context.Context, formats strfmt.Registry) error {

	if m.Metadata != nil {
		if err := m.Metadata.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metadata")
			}
			return err
		}
	}

	return nil
}

func (m *NetworkRoute) contextValidateStatuses(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Statuses); i++ {

		if m.Statuses[i] != nil {
			if err := m.Statuses[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("statuses" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *NetworkRoute) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NetworkRoute) UnmarshalBinary(b []byte) error {
	var res NetworkRoute
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
