// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new operations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for operations API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteOperation(params *DeleteOperationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteOperationNoContent, error)

	GetOperation(params *GetOperationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOperationOK, error)

	WaitOperation(params *WaitOperationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*WaitOperationOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
	DeleteOperation deletes operation

	Deleting an operation will have no impact on the resource which the

operation was tracking.
*/
func (a *Client) DeleteOperation(params *DeleteOperationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteOperationNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteOperationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteOperation",
		Method:             "DELETE",
		PathPattern:        "/ipam/v1/stacks/{stack_id}/operations/{operation_name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteOperationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteOperationNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteOperation: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetOperation gets operation

	An operation is a common type in the StackPath API used to provide a

consistent interface to API consumers to be able to determine the status
of the action which was executed.

The recommended integration is for API consumers to read the `name` and
`metadata.apiVersion` of the operation which is returned and construct
an API request to one of the following endpoints:

  - `GET /ipam/{metadata.apiVersion}/{name}` - Will immediatey return the
    current status of the operation, which may not be done executing.
  - `GET /ipam/{metadata.apiVersion}/{name}/wait` - Will wait up to 30
    seconds for the operation to be done executing, and will return the
    current status of the operation upon a timeout. If a timeout shorter
    than 30 seconds is desired, a value may be provided in the `timeout`
    URL parameter.

When an operation is done executing, the `done` field will have a value
of `true`, and either the `error` field will be populated with error
information, or the `response` field will have the resource which was
acted upon as a result of the request.
*/
func (a *Client) GetOperation(params *GetOperationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOperationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOperationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetOperation",
		Method:             "GET",
		PathPattern:        "/ipam/v1/stacks/{stack_id}/operations/{operation_name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOperationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOperationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetOperation: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	WaitOperation waits for operation

	An operation is a common type in the StackPath API used to provide a

consistent interface to API consumers to be able to determine the status
of the action which was executed.

The recommended integration is for API consumers to read the `name` and
`metadata.apiVersion` of the operation which is returned and construct
an API request to one of the following endpoints:

  - `GET /ipam/{metadata.apiVersion}/{name}` - Will immediatey return the
    current status of the operation, which may not be done executing.
  - `GET /ipam/{metadata.apiVersion}/{name}/wait` - Will wait up to 30
    seconds for the operation to be done executing, and will return the
    current status of the operation upon a timeout. If a timeout shorter
    than 30 seconds is desired, a value may be provided in the `timeout`
    URL parameter.

When an operation is done executing, the `done` field will have a value
of `true`, and either the `error` field will be populated with error
information, or the `response` field will have the resource which was
acted upon as a result of the request.
*/
func (a *Client) WaitOperation(params *WaitOperationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*WaitOperationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWaitOperationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "WaitOperation",
		Method:             "GET",
		PathPattern:        "/ipam/v1/stacks/{stack_id}/operations/{operation_name}/wait",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &WaitOperationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WaitOperationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for WaitOperation: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
