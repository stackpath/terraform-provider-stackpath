// Code generated by go-swagger; DO NOT EDIT.

package allocations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/stackpath/terraform-provider-stackpath/v2/stackpath/api/ipam/ipam_models"
)

// UpdateAllocationClaimReader is a Reader for the UpdateAllocationClaim structure.
type UpdateAllocationClaimReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateAllocationClaimReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateAllocationClaimOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewUpdateAllocationClaimUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateAllocationClaimInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewUpdateAllocationClaimDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewUpdateAllocationClaimOK creates a UpdateAllocationClaimOK with default headers values
func NewUpdateAllocationClaimOK() *UpdateAllocationClaimOK {
	return &UpdateAllocationClaimOK{}
}

/*
UpdateAllocationClaimOK describes a response with status code 200, with default header values.

UpdateAllocationClaimOK update allocation claim o k
*/
type UpdateAllocationClaimOK struct {
	Payload *ipam_models.V1Operation
}

func (o *UpdateAllocationClaimOK) Error() string {
	return fmt.Sprintf("[PATCH /ipam/v1/stacks/{stack_id}/allocation_claims/{allocation_claim_slug}][%d] updateAllocationClaimOK  %+v", 200, o.Payload)
}
func (o *UpdateAllocationClaimOK) GetPayload() *ipam_models.V1Operation {
	return o.Payload
}

func (o *UpdateAllocationClaimOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ipam_models.V1Operation)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateAllocationClaimUnauthorized creates a UpdateAllocationClaimUnauthorized with default headers values
func NewUpdateAllocationClaimUnauthorized() *UpdateAllocationClaimUnauthorized {
	return &UpdateAllocationClaimUnauthorized{}
}

/*
UpdateAllocationClaimUnauthorized describes a response with status code 401, with default header values.

Returned when an unauthorized request is attempted.
*/
type UpdateAllocationClaimUnauthorized struct {
	Payload *ipam_models.APIStatus
}

func (o *UpdateAllocationClaimUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /ipam/v1/stacks/{stack_id}/allocation_claims/{allocation_claim_slug}][%d] updateAllocationClaimUnauthorized  %+v", 401, o.Payload)
}
func (o *UpdateAllocationClaimUnauthorized) GetPayload() *ipam_models.APIStatus {
	return o.Payload
}

func (o *UpdateAllocationClaimUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ipam_models.APIStatus)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateAllocationClaimInternalServerError creates a UpdateAllocationClaimInternalServerError with default headers values
func NewUpdateAllocationClaimInternalServerError() *UpdateAllocationClaimInternalServerError {
	return &UpdateAllocationClaimInternalServerError{}
}

/*
UpdateAllocationClaimInternalServerError describes a response with status code 500, with default header values.

Internal server error.
*/
type UpdateAllocationClaimInternalServerError struct {
	Payload *ipam_models.APIStatus
}

func (o *UpdateAllocationClaimInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /ipam/v1/stacks/{stack_id}/allocation_claims/{allocation_claim_slug}][%d] updateAllocationClaimInternalServerError  %+v", 500, o.Payload)
}
func (o *UpdateAllocationClaimInternalServerError) GetPayload() *ipam_models.APIStatus {
	return o.Payload
}

func (o *UpdateAllocationClaimInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ipam_models.APIStatus)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateAllocationClaimDefault creates a UpdateAllocationClaimDefault with default headers values
func NewUpdateAllocationClaimDefault(code int) *UpdateAllocationClaimDefault {
	return &UpdateAllocationClaimDefault{
		_statusCode: code,
	}
}

/*
UpdateAllocationClaimDefault describes a response with status code -1, with default header values.

Default error structure.
*/
type UpdateAllocationClaimDefault struct {
	_statusCode int

	Payload *ipam_models.APIStatus
}

// Code gets the status code for the update allocation claim default response
func (o *UpdateAllocationClaimDefault) Code() int {
	return o._statusCode
}

func (o *UpdateAllocationClaimDefault) Error() string {
	return fmt.Sprintf("[PATCH /ipam/v1/stacks/{stack_id}/allocation_claims/{allocation_claim_slug}][%d] UpdateAllocationClaim default  %+v", o._statusCode, o.Payload)
}
func (o *UpdateAllocationClaimDefault) GetPayload() *ipam_models.APIStatus {
	return o.Payload
}

func (o *UpdateAllocationClaimDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ipam_models.APIStatus)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
