// Code generated by go-swagger; DO NOT EDIT.

package allocations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new allocations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for allocations API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateAllocation(params *CreateAllocationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateAllocationOK, error)

	CreateAllocationClaim(params *CreateAllocationClaimParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateAllocationClaimOK, error)

	DeleteAllocation(params *DeleteAllocationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteAllocationOK, error)

	DeleteAllocationClaim(params *DeleteAllocationClaimParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteAllocationClaimOK, error)

	GetAllocation(params *GetAllocationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllocationOK, error)

	GetAllocationClaim(params *GetAllocationClaimParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllocationClaimOK, error)

	GetAllocationClaims(params *GetAllocationClaimsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllocationClaimsOK, error)

	GetAllocations(params *GetAllocationsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllocationsOK, error)

	UpdateAllocation(params *UpdateAllocationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateAllocationOK, error)

	UpdateAllocationClaim(params *UpdateAllocationClaimParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateAllocationClaimOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateAllocation create allocation API
*/
func (a *Client) CreateAllocation(params *CreateAllocationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateAllocationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateAllocationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateAllocation",
		Method:             "POST",
		PathPattern:        "/ipam/v1/stacks/{stack_id}/allocations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateAllocationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateAllocationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateAllocationDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CreateAllocationClaim create allocation claim API
*/
func (a *Client) CreateAllocationClaim(params *CreateAllocationClaimParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateAllocationClaimOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateAllocationClaimParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateAllocationClaim",
		Method:             "POST",
		PathPattern:        "/ipam/v1/stacks/{stack_id}/allocation_claims",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateAllocationClaimReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateAllocationClaimOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateAllocationClaimDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteAllocation delete allocation API
*/
func (a *Client) DeleteAllocation(params *DeleteAllocationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteAllocationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAllocationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteAllocation",
		Method:             "DELETE",
		PathPattern:        "/ipam/v1/stacks/{stack_id}/allocations/{allocation_slug}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteAllocationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteAllocationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteAllocationDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteAllocationClaim delete allocation claim API
*/
func (a *Client) DeleteAllocationClaim(params *DeleteAllocationClaimParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteAllocationClaimOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAllocationClaimParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteAllocationClaim",
		Method:             "DELETE",
		PathPattern:        "/ipam/v1/stacks/{stack_id}/allocation_claims/{allocation_claim_slug}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteAllocationClaimReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteAllocationClaimOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteAllocationClaimDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetAllocation get allocation API
*/
func (a *Client) GetAllocation(params *GetAllocationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllocationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllocationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAllocation",
		Method:             "GET",
		PathPattern:        "/ipam/v1/stacks/{stack_id}/allocations/{allocation_slug}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAllocationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllocationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetAllocationDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetAllocationClaim get allocation claim API
*/
func (a *Client) GetAllocationClaim(params *GetAllocationClaimParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllocationClaimOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllocationClaimParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAllocationClaim",
		Method:             "GET",
		PathPattern:        "/ipam/v1/stacks/{stack_id}/allocation_claims/{allocation_claim_slug}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAllocationClaimReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllocationClaimOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetAllocationClaimDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetAllocationClaims get allocation claims API
*/
func (a *Client) GetAllocationClaims(params *GetAllocationClaimsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllocationClaimsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllocationClaimsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAllocationClaims",
		Method:             "GET",
		PathPattern:        "/ipam/v1/stacks/{stack_id}/allocation_claims",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAllocationClaimsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllocationClaimsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetAllocationClaimsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetAllocations get allocations API
*/
func (a *Client) GetAllocations(params *GetAllocationsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllocationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllocationsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAllocations",
		Method:             "GET",
		PathPattern:        "/ipam/v1/stacks/{stack_id}/allocations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAllocationsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllocationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetAllocationsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateAllocation update allocation API
*/
func (a *Client) UpdateAllocation(params *UpdateAllocationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateAllocationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateAllocationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateAllocation",
		Method:             "PATCH",
		PathPattern:        "/ipam/v1/stacks/{stack_id}/allocations/{allocation_slug}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateAllocationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateAllocationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateAllocationDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateAllocationClaim update allocation claim API
*/
func (a *Client) UpdateAllocationClaim(params *UpdateAllocationClaimParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateAllocationClaimOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateAllocationClaimParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateAllocationClaim",
		Method:             "PATCH",
		PathPattern:        "/ipam/v1/stacks/{stack_id}/allocation_claims/{allocation_claim_slug}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateAllocationClaimReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateAllocationClaimOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateAllocationClaimDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
