// Code generated by go-swagger; DO NOT EDIT.

package virtual_private_cloud

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new virtual private cloud API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for virtual private cloud API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateNetwork(params *CreateNetworkParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateNetworkOK, error)

	CreateNetworkSubnet(params *CreateNetworkSubnetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateNetworkSubnetOK, error)

	CreateRoute(params *CreateRouteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateRouteOK, error)

	DeleteNetwork(params *DeleteNetworkParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteNetworkNoContent, error)

	DeleteNetworkSubnet(params *DeleteNetworkSubnetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteNetworkSubnetNoContent, error)

	DeleteRoute(params *DeleteRouteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteRouteNoContent, error)

	GetNetwork(params *GetNetworkParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkOK, error)

	GetNetworkSubnet(params *GetNetworkSubnetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkSubnetOK, error)

	GetNetworkSubnets(params *GetNetworkSubnetsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkSubnetsOK, error)

	GetNetworks(params *GetNetworksParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworksOK, error)

	GetRoute(params *GetRouteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetRouteOK, error)

	GetRoutes(params *GetRoutesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetRoutesOK, error)

	UpdateNetwork(params *UpdateNetworkParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateNetworkOK, error)

	UpdateNetworkSubnet(params *UpdateNetworkSubnetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateNetworkSubnetOK, error)

	UpdateRoute(params *UpdateRouteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateRouteOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateNetwork creates a v p c network
*/
func (a *Client) CreateNetwork(params *CreateNetworkParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateNetworkOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateNetworkParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateNetwork",
		Method:             "POST",
		PathPattern:        "/ipam/v1/stacks/{stack_id}/networks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateNetworkReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateNetworkOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateNetworkDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CreateNetworkSubnet create network subnet API
*/
func (a *Client) CreateNetworkSubnet(params *CreateNetworkSubnetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateNetworkSubnetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateNetworkSubnetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateNetworkSubnet",
		Method:             "POST",
		PathPattern:        "/ipam/v1alpha/stacks/{stack_id}/networks/{network_id}/subnets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateNetworkSubnetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateNetworkSubnetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateNetworkSubnetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	CreateRoute creates a network route

	[block:callout]

	{
	  "type": "danger",
	  "body": "This is an alpha API call and should be considered very unstable. Please do not execute this in a production environment. See our [versioning guidelines](doc:versioning) for more information."
	}

[/block]
*/
func (a *Client) CreateRoute(params *CreateRouteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateRouteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateRouteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateRoute",
		Method:             "POST",
		PathPattern:        "/ipam/v1alpha/stacks/{stack_id}/networks/{network_id}/routes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateRouteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateRouteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateRouteDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteNetwork deletes a v p c network
*/
func (a *Client) DeleteNetwork(params *DeleteNetworkParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteNetworkNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteNetworkParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteNetwork",
		Method:             "DELETE",
		PathPattern:        "/ipam/v1/stacks/{stack_id}/networks/{network_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteNetworkReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteNetworkNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteNetworkDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteNetworkSubnet delete network subnet API
*/
func (a *Client) DeleteNetworkSubnet(params *DeleteNetworkSubnetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteNetworkSubnetNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteNetworkSubnetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteNetworkSubnet",
		Method:             "DELETE",
		PathPattern:        "/ipam/v1alpha/stacks/{stack_id}/networks/{network_id}/subnets/{subnet_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteNetworkSubnetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteNetworkSubnetNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteNetworkSubnetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	DeleteRoute deletes a network route

	[block:callout]

	{
	  "type": "danger",
	  "body": "This is an alpha API call and should be considered very unstable. Please do not execute this in a production environment. See our [versioning guidelines](doc:versioning) for more information."
	}

[/block]
*/
func (a *Client) DeleteRoute(params *DeleteRouteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteRouteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteRouteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteRoute",
		Method:             "DELETE",
		PathPattern:        "/ipam/v1alpha/stacks/{stack_id}/networks/{network_id}/routes/{route_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteRouteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteRouteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteRouteDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetNetwork gets a v p c network
*/
func (a *Client) GetNetwork(params *GetNetworkParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetNetwork",
		Method:             "GET",
		PathPattern:        "/ipam/v1/stacks/{stack_id}/networks/{network_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetNetworkDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetNetworkSubnet get network subnet API
*/
func (a *Client) GetNetworkSubnet(params *GetNetworkSubnetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkSubnetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkSubnetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetNetworkSubnet",
		Method:             "GET",
		PathPattern:        "/ipam/v1alpha/stacks/{stack_id}/networks/{network_id}/subnets/{subnet_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkSubnetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkSubnetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetNetworkSubnetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetNetworkSubnets get network subnets API
*/
func (a *Client) GetNetworkSubnets(params *GetNetworkSubnetsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworkSubnetsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkSubnetsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetNetworkSubnets",
		Method:             "GET",
		PathPattern:        "/ipam/v1alpha/stacks/{stack_id}/networks/{network_id}/subnets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkSubnetsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworkSubnetsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetNetworkSubnetsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetNetworks gets all v p c networks
*/
func (a *Client) GetNetworks(params *GetNetworksParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNetworksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworksParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetNetworks",
		Method:             "GET",
		PathPattern:        "/ipam/v1/stacks/{stack_id}/networks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworksReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNetworksOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetNetworksDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	GetRoute gets a network route

	[block:callout]

	{
	  "type": "danger",
	  "body": "This is an alpha API call and should be considered very unstable. Please do not execute this in a production environment. See our [versioning guidelines](doc:versioning) for more information."
	}

[/block]
*/
func (a *Client) GetRoute(params *GetRouteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetRouteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRouteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetRoute",
		Method:             "GET",
		PathPattern:        "/ipam/v1alpha/stacks/{stack_id}/networks/{network_id}/routes/{route_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRouteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRouteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetRouteDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	GetRoutes gets all network routes

	[block:callout]

	{
	  "type": "danger",
	  "body": "This is an alpha API call and should be considered very unstable. Please do not execute this in a production environment. See our [versioning guidelines](doc:versioning) for more information."
	}

[/block]
*/
func (a *Client) GetRoutes(params *GetRoutesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetRoutesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRoutesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetRoutes",
		Method:             "GET",
		PathPattern:        "/ipam/v1alpha/stacks/{stack_id}/networks/{network_id}/routes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRoutesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRoutesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetRoutesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateNetwork updates a v p c network

Only a network's name may be updated
*/
func (a *Client) UpdateNetwork(params *UpdateNetworkParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateNetworkOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateNetworkParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateNetwork",
		Method:             "PATCH",
		PathPattern:        "/ipam/v1/stacks/{stack_id}/networks/{network_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateNetworkReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateNetworkOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateNetworkDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateNetworkSubnet update network subnet API
*/
func (a *Client) UpdateNetworkSubnet(params *UpdateNetworkSubnetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateNetworkSubnetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateNetworkSubnetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateNetworkSubnet",
		Method:             "PUT",
		PathPattern:        "/ipam/v1alpha/stacks/{stack_id}/networks/{network_id}/subnets/{subnet_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateNetworkSubnetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateNetworkSubnetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateNetworkSubnetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	UpdateRoute updates a network route

	[block:callout]

	{
	  "type": "danger",
	  "body": "This is an alpha API call and should be considered very unstable. Please do not execute this in a production environment. See our [versioning guidelines](doc:versioning) for more information."
	}

[/block]
*/
func (a *Client) UpdateRoute(params *UpdateRouteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateRouteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateRouteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateRoute",
		Method:             "PUT",
		PathPattern:        "/ipam/v1alpha/stacks/{stack_id}/networks/{network_id}/routes/{route_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateRouteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateRouteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateRouteDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
